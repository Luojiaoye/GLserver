// Generated by Haxe 3.4.7

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace core.node {
	public class Node : global::haxe.lang.HxObject, global::serialization.ISerializable {
		
		public Node(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Node() {
			global::core.node.Node.__hx_ctor_core_node_Node(this);
		}
		
		
		public static void __hx_ctor_core_node_Node(global::core.node.Node __hx_this) {
			__hx_this.Initialize(default(global::haxe.lang.Null<int>), null, null);
		}
		
		
		public string type;
		
		public string name;
		
		public int nodeId;
		
		public global::haxe.ds.IntMap<object> _slots;
		
		public global::haxe.ds.IntMap<object> _datumMap;
		
		public global::graph.Graph owner;
		
		public virtual void Initialize(global::haxe.lang.Null<int> nodeId, string name, string type) {
			unchecked {
				if (string.Equals(type, null)) {
					type = "";
				}
				
				if (string.Equals(name, null)) {
					name = "";
				}
				
				int __temp_nodeId4 = ( ( ! (nodeId.hasValue) ) ? (-1) : ((nodeId).@value) );
				this.nodeId = __temp_nodeId4;
				this.name = name;
				this.type = type;
				this._slots = new global::haxe.ds.IntMap<object>();
				this._datumMap = new global::haxe.ds.IntMap<object>();
			}
		}
		
		
		public virtual string SerializeToJson() {
			global::Array<object> slotsObj = this.SerializeSlots();
			global::Array<object> datumMapObj = this.SerializeDatumMap();
			object json = new global::haxe.lang.DynamicObject(new int[]{580141348, 1224700491, 1292432058, 2127323317}, new object[]{datumMapObj, this.name, this.type, slotsObj}, new int[]{656559741}, new double[]{((double) (this.nodeId) )});
			return global::haxe.format.JsonPrinter.print(json, null, null);
		}
		
		
		public virtual void SeriralizeToBytes(global::haxe.io.Bytes bytes) {
		}
		
		
		public virtual void DeserializeFromJson(string json) {
			object obj = new global::haxe.format.JsonParser(((string) (json) )).parseRec();
			this.type = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(obj, "type", 1292432058, true));
			this.name = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(obj, "name", 1224700491, true));
			this.nodeId = ((int) (global::haxe.lang.Runtime.getField_f(obj, "nodeId", 656559741, true)) );
			global::Array<object> slots = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(obj, "slots", 2127323317, true)) ))) );
			{
				int _g = 0;
				while (( _g < slots.length )) {
					string item = global::haxe.lang.Runtime.toString(slots[_g]);
					 ++ _g;
					global::core.slot.Slot slotObj = new global::core.slot.Slot();
					slotObj.DeserializeFromJson(item);
					((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._slots) )) ))) ).@set(slotObj.slotId, slotObj);
				}
				
			}
			
			global::Array<object> datumMap = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(obj, "datums", 580141348, true)) ))) );
			{
				int _g1 = 0;
				while (( _g1 < datumMap.length )) {
					string item1 = global::haxe.lang.Runtime.toString(datumMap[_g1]);
					 ++ _g1;
					object data = new global::haxe.format.JsonParser(((string) (item1) )).parseRec();
					global::core.Datum datumObj = new global::core.Datum();
					datumObj.DeserializeFromJson(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(data, "datum", 1418207343, true)));
					((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._datumMap) )) ))) ).@set(((int) (global::haxe.lang.Runtime.getField_f(data, "slotId", 1946687865, true)) ), datumObj);
				}
				
			}
			
		}
		
		
		public virtual void DeserializeFromBytes(global::haxe.io.Bytes bytes) {
		}
		
		
		public virtual global::Array<object> SerializeSlots() {
			global::Array<object> json = new global::Array<object>();
			{
				object key = ((object) (new global::haxe.ds._IntMap.IntMapKeyIterator<object>(((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._slots) )) ))) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(key, "hasNext", 407283053, null))) {
					int key1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(key, "next", 1224901875, null))) );
					json.push(((global::core.slot.Slot) ((((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._slots) )) ))) ).@get(key1)).@value) ).SerializeToJson());
				}
				
			}
			
			return json;
		}
		
		
		public virtual global::Array<object> SerializeDatumMap() {
			global::Array<object> json = new global::Array<object>();
			{
				object key = ((object) (new global::haxe.ds._IntMap.IntMapKeyIterator<object>(((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._datumMap) )) ))) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(key, "hasNext", 407283053, null))) {
					int key1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(key, "next", 1224901875, null))) );
					object pair = null;
					{
						string __temp_odecl1 = ((global::core.Datum) ((((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._datumMap) )) ))) ).@get(key1)).@value) ).SerializeToJson();
						pair = new global::haxe.lang.DynamicObject(new int[]{1418207343}, new object[]{__temp_odecl1}, new int[]{1946687865}, new double[]{((double) (key1) )});
					}
					
					json.push(global::haxe.format.JsonPrinter.print(pair, null, null));
				}
				
			}
			
			return json;
		}
		
		
		public virtual void AddSlot(global::core.slot.Slot slot) {
			((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._slots) )) ))) ).@set(slot.slotId, slot);
		}
		
		
		public virtual global::core.Datum GetSlotData(int slotId) {
			return ((global::core.Datum) ((((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._datumMap) )) ))) ).@get(slotId)).@value) );
		}
		
		
		public virtual global::core.Datum GetInput(global::core.node.Node node, int slotId) {
			return node.GetSlotData(slotId);
		}
		
		
		public virtual void SetSlotData(int slotId, global::core.Datum data) {
			((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._datumMap) )) ))) ).@set(slotId, data);
		}
		
		
		public virtual void SetInput(global::core.node.Node node, global::core.Datum data, int slotId) {
			node.SetSlotData(slotId, data);
		}
		
		
		public virtual void SignalInput(int slotId) {
			this.OnInputSignal(slotId);
		}
		
		
		public virtual void OnInputSignal(int slotId) {
		}
		
		
		public virtual void SignalOutput(int slotId) {
			bool executionCheckRequired = false;
			if (( slotId > 0 )) {
				global::core.slot.Slot slot = ((global::core.slot.Slot) ((((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._slots) )) ))) ).@get(slotId)).@value) );
				if (( slot != null )) {
					global::graph.EndPoint curEndpoint = new global::graph.EndPoint(new global::haxe.lang.Null<int>(this.nodeId, true), new global::haxe.lang.Null<int>(slotId, true));
					global::Array<object> endpoints = this.owner.GetConnectedEndpoints(curEndpoint);
					{
						int _g = 0;
						while (( _g < endpoints.length )) {
							global::graph.EndPoint endpoint = ((global::graph.EndPoint) (endpoints[_g]) );
							 ++ _g;
							global::core.node.Node nextNode = this.owner.FindNode(endpoint.nodeId);
							if (( nextNode != null )) {
								this.owner.AddToExecutionStack(endpoint);
								executionCheckRequired = true;
							}
							
						}
						
					}
					
				}
				
			}
			
			if (executionCheckRequired) {
				this.owner.Execute();
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 656559741:
					{
						this.nodeId = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 947296307:
					{
						this.owner = ((global::graph.Graph) (@value) );
						return @value;
					}
					
					
					case 1752910028:
					{
						this._datumMap = ((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (@value) ))) );
						return @value;
					}
					
					
					case 2058594294:
					{
						this._slots = ((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (@value) ))) );
						return @value;
					}
					
					
					case 656559741:
					{
						this.nodeId = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1224700491:
					{
						this.name = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1292432058:
					{
						this.type = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 641514409:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SignalOutput", 641514409)) );
					}
					
					
					case 1419015955:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "OnInputSignal", 1419015955)) );
					}
					
					
					case 1525572706:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SignalInput", 1525572706)) );
					}
					
					
					case 637790504:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SetInput", 637790504)) );
					}
					
					
					case 715102442:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SetSlotData", 715102442)) );
					}
					
					
					case 2007404468:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "GetInput", 2007404468)) );
					}
					
					
					case 540185054:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "GetSlotData", 540185054)) );
					}
					
					
					case 1441024159:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddSlot", 1441024159)) );
					}
					
					
					case 426773325:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SerializeDatumMap", 426773325)) );
					}
					
					
					case 1520220885:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SerializeSlots", 1520220885)) );
					}
					
					
					case 1885040770:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DeserializeFromBytes", 1885040770)) );
					}
					
					
					case 337619441:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DeserializeFromJson", 337619441)) );
					}
					
					
					case 1630734736:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SeriralizeToBytes", 1630734736)) );
					}
					
					
					case 1990209315:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SerializeToJson", 1990209315)) );
					}
					
					
					case 1668035952:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Initialize", 1668035952)) );
					}
					
					
					case 947296307:
					{
						return this.owner;
					}
					
					
					case 1752910028:
					{
						return this._datumMap;
					}
					
					
					case 2058594294:
					{
						return this._slots;
					}
					
					
					case 656559741:
					{
						return this.nodeId;
					}
					
					
					case 1224700491:
					{
						return this.name;
					}
					
					
					case 1292432058:
					{
						return this.type;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 656559741:
					{
						return ((double) (this.nodeId) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 641514409:
					{
						this.SignalOutput(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1419015955:
					{
						this.OnInputSignal(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1525572706:
					{
						this.SignalInput(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 637790504:
					{
						this.SetInput(((global::core.node.Node) (dynargs[0]) ), ((global::core.Datum) (dynargs[1]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 715102442:
					{
						this.SetSlotData(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((global::core.Datum) (dynargs[1]) ));
						break;
					}
					
					
					case 2007404468:
					{
						return this.GetInput(((global::core.node.Node) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 540185054:
					{
						return this.GetSlotData(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1441024159:
					{
						this.AddSlot(((global::core.slot.Slot) (dynargs[0]) ));
						break;
					}
					
					
					case 426773325:
					{
						return this.SerializeDatumMap();
					}
					
					
					case 1520220885:
					{
						return this.SerializeSlots();
					}
					
					
					case 1885040770:
					{
						this.DeserializeFromBytes(((global::haxe.io.Bytes) (dynargs[0]) ));
						break;
					}
					
					
					case 337619441:
					{
						this.DeserializeFromJson(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 1630734736:
					{
						this.SeriralizeToBytes(((global::haxe.io.Bytes) (dynargs[0]) ));
						break;
					}
					
					
					case 1990209315:
					{
						return this.SerializeToJson();
					}
					
					
					case 1668035952:
					{
						this.Initialize(global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), global::haxe.lang.Runtime.toString(dynargs[2]));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("owner");
			baseArr.push("_datumMap");
			baseArr.push("_slots");
			baseArr.push("nodeId");
			baseArr.push("name");
			baseArr.push("type");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


