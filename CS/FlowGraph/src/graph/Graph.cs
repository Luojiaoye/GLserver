// Generated by Haxe 3.4.7

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace graph {
	public class Graph : global::core.node.Node, global::serialization.ISerializable {
		
		public Graph(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public Graph(string graphId) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::graph.Graph.__hx_ctor_graph_Graph(this, graphId);
		}
		
		
		public static void __hx_ctor_graph_Graph(global::graph.Graph __hx_this, string graphId) {
			if (string.Equals(graphId, null)) {
				graphId = "";
			}
			
			global::core.node.Node.__hx_ctor_core_node_Node(__hx_this);
			__hx_this.graphId = graphId;
			__hx_this._nodes = new global::haxe.ds.IntMap<object>();
			__hx_this._relations = new global::haxe.ds.ObjectMap<object, object>();
			__hx_this._stack = new global::haxe.ds.GenericStack<object>();
		}
		
		
		public string graphId;
		
		public global::haxe.ds.IntMap<object> _nodes;
		
		public global::haxe.ds.ObjectMap<object, object> _relations;
		
		public global::haxe.ds.GenericStack<object> _stack;
		
		public virtual void Start() {
			this.Clear();
			this.Execute();
		}
		
		
		public virtual void Stop() {
			this.Clear();
		}
		
		
		public virtual void Clear() {
			while (( this._stack.head != null )) {
				global::haxe.ds.GenericStack<object> _this = this._stack;
				global::haxe.ds.GenericCell<object> k = _this.head;
				if (( k == null )) {
				}
				else {
					_this.head = k.next;
				}
				
			}
			
		}
		
		
		public virtual void AddToExecutionStack(global::graph.EndPoint endpoint) {
			global::haxe.ds.GenericStack<object> _this = this._stack;
			_this.head = new global::haxe.ds.GenericCell<object>(endpoint, _this.head);
		}
		
		
		public virtual void Execute() {
			while (( this._stack.head != null )) {
				global::haxe.ds.GenericStack<object> _this = this._stack;
				global::haxe.ds.GenericCell<object> k = _this.head;
				global::graph.EndPoint endpoint = null;
				if (( k == null )) {
					endpoint = null;
				}
				else {
					_this.head = k.next;
					endpoint = ((global::graph.EndPoint) (k.elt) );
				}
				
				global::core.node.Node node = this.FindNode(endpoint.nodeId);
				if (( node != null )) {
					node.SignalInput(endpoint.slotId);
				}
				
			}
			
		}
		
		
		public virtual void AddNode(global::core.node.Node node) {
			((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._nodes) )) ))) ).@set(node.nodeId, node);
		}
		
		
		public virtual void AddRelation(global::graph.EndPoint curEP, global::Array<object> nextEPS) {
			((global::haxe.ds.ObjectMap<object, object>) (global::haxe.ds.ObjectMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.ObjectMap) (((global::haxe.IMap<object, object>) (this._relations) )) ))) ).@set(curEP, nextEPS);
		}
		
		
		public override string SerializeToJson() {
			global::Array<object> nodesJson = this.SerializeNodes();
			global::Array<object> relations = this.SerializeRelations();
			object json = new global::haxe.lang.DynamicObject(new int[]{532592689, 1682648631, 1946631881}, new object[]{nodesJson, relations, this.graphId}, new int[]{}, new double[]{});
			return global::haxe.format.JsonPrinter.print(json, null, null);
		}
		
		
		public virtual global::Array<object> SerializeNodes() {
			global::Array<object> json = new global::Array<object>();
			{
				object key = ((object) (new global::haxe.ds._IntMap.IntMapKeyIterator<object>(((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._nodes) )) ))) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(key, "hasNext", 407283053, null))) {
					int key1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(key, "next", 1224901875, null))) );
					json.push(((global::core.node.Node) ((((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._nodes) )) ))) ).@get(key1)).@value) ).SerializeToJson());
				}
				
			}
			
			return json;
		}
		
		
		public virtual global::Array<object> SerializeRelations() {
			global::Array<object> json = new global::Array<object>();
			{
				object key = ((global::haxe.ds.ObjectMap<object, object>) (global::haxe.ds.ObjectMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.ObjectMap) (((global::haxe.IMap<object, object>) (this._relations) )) ))) ).keys();
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(key, "hasNext", 407283053, null))) {
					global::graph.EndPoint key1 = ((global::graph.EndPoint) (global::haxe.lang.Runtime.callField(key, "next", 1224901875, null)) );
					string endPointJson = key1.SerializeToJson();
					global::Array<object> relationObj = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) ((((global::haxe.ds.ObjectMap<object, object>) (global::haxe.ds.ObjectMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.ObjectMap) (((global::haxe.IMap<object, object>) (this._relations) )) ))) ).@get(key1)).@value) ))) );
					global::Array<object> relationJson = new global::Array<object>();
					{
						int _g = 0;
						while (( _g < relationObj.length )) {
							global::graph.EndPoint obj = ((global::graph.EndPoint) (relationObj[_g]) );
							 ++ _g;
							relationJson.push(obj.SerializeToJson());
						}
						
					}
					
					object realtionPair = new global::haxe.lang.DynamicObject(new int[]{4949376, 1224901875}, new object[]{endPointJson, relationJson}, new int[]{}, new double[]{});
					json.push(global::haxe.format.JsonPrinter.print(realtionPair, null, null));
				}
				
			}
			
			return json;
		}
		
		
		public override void SeriralizeToBytes(global::haxe.io.Bytes bytes) {
		}
		
		
		public override void DeserializeFromJson(string json) {
			object obj = new global::haxe.format.JsonParser(((string) (json) )).parseRec();
			this.graphId = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(obj, "graphId", 1946631881, true));
			global::Array<object> nodes = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(obj, "nodes", 532592689, true)) ))) );
			{
				int _g = 0;
				while (( _g < nodes.length )) {
					string item = global::haxe.lang.Runtime.toString(nodes[_g]);
					 ++ _g;
					global::core.node.Node node = new global::core.node.Node();
					node.DeserializeFromJson(item);
					node.owner = this;
					((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._nodes) )) ))) ).@set(node.nodeId, node);
				}
				
			}
			
			global::Array<object> relations = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(obj, "relations", 1682648631, true)) ))) );
			{
				int _g1 = 0;
				while (( _g1 < relations.length )) {
					string item1 = global::haxe.lang.Runtime.toString(relations[_g1]);
					 ++ _g1;
					object relationPairObj = new global::haxe.format.JsonParser(((string) (item1) )).parseRec();
					global::graph.EndPoint endPoint = new global::graph.EndPoint(default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					endPoint.DeserializeFromJson(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(relationPairObj, "cur", 4949376, true)));
					global::Array<object> endPoints = new global::Array<object>();
					{
						int _g11 = 0;
						global::Array<object> _g2 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(relationPairObj, "next", 1224901875, true)) ))) );
						while (( _g11 < _g2.length )) {
							string ep = global::haxe.lang.Runtime.toString(_g2[_g11]);
							 ++ _g11;
							global::graph.EndPoint point = new global::graph.EndPoint(default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
							point.DeserializeFromJson(ep);
							endPoints.push(point);
						}
						
					}
					
					((global::haxe.ds.ObjectMap<object, object>) (global::haxe.ds.ObjectMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.ObjectMap) (((global::haxe.IMap<object, object>) (this._relations) )) ))) ).@set(endPoint, endPoints);
				}
				
			}
			
		}
		
		
		public override void DeserializeFromBytes(global::haxe.io.Bytes bytes) {
		}
		
		
		public virtual global::Array<object> GetConnectedEndpoints(global::graph.EndPoint first) {
			return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) ((((global::haxe.ds.ObjectMap<object, object>) (global::haxe.ds.ObjectMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.ObjectMap) (((global::haxe.IMap<object, object>) (this._relations) )) ))) ).@get(first)).@value) ))) );
		}
		
		
		public virtual global::core.node.Node FindNode(int nodeId) {
			return ((global::core.node.Node) ((((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this._nodes) )) ))) ).@get(nodeId)).@value) );
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2146610825:
					{
						this._stack = ((global::haxe.ds.GenericStack<object>) (global::haxe.ds.GenericStack<object>.__hx_cast<object>(((global::haxe.ds.GenericStack) (@value) ))) );
						return @value;
					}
					
					
					case 1072540152:
					{
						this._relations = ((global::haxe.ds.ObjectMap<object, object>) (global::haxe.ds.ObjectMap<object, object>.__hx_cast<object, object>(((global::haxe.ds.ObjectMap) (@value) ))) );
						return @value;
					}
					
					
					case 463863666:
					{
						this._nodes = ((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (@value) ))) );
						return @value;
					}
					
					
					case 1946631881:
					{
						this.graphId = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1968165627:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "FindNode", 1968165627)) );
					}
					
					
					case 1418820171:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "GetConnectedEndpoints", 1418820171)) );
					}
					
					
					case 1885040770:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DeserializeFromBytes", 1885040770)) );
					}
					
					
					case 337619441:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "DeserializeFromJson", 337619441)) );
					}
					
					
					case 1630734736:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SeriralizeToBytes", 1630734736)) );
					}
					
					
					case 1696798807:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SerializeRelations", 1696798807)) );
					}
					
					
					case 2072973905:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SerializeNodes", 2072973905)) );
					}
					
					
					case 1990209315:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "SerializeToJson", 1990209315)) );
					}
					
					
					case 1264813533:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddRelation", 1264813533)) );
					}
					
					
					case 1385723043:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddNode", 1385723043)) );
					}
					
					
					case 425603605:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Execute", 425603605)) );
					}
					
					
					case 207845260:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddToExecutionStack", 207845260)) );
					}
					
					
					case 1535697261:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Clear", 1535697261)) );
					}
					
					
					case 926227490:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Stop", 926227490)) );
					}
					
					
					case 389604418:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Start", 389604418)) );
					}
					
					
					case 2146610825:
					{
						return this._stack;
					}
					
					
					case 1072540152:
					{
						return this._relations;
					}
					
					
					case 463863666:
					{
						return this._nodes;
					}
					
					
					case 1946631881:
					{
						return this.graphId;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1990209315:
					case 1630734736:
					case 337619441:
					case 1885040770:
					{
						return global::haxe.lang.Runtime.slowCallField(this, field, dynargs);
					}
					
					
					case 1968165627:
					{
						return this.FindNode(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1418820171:
					{
						return this.GetConnectedEndpoints(((global::graph.EndPoint) (dynargs[0]) ));
					}
					
					
					case 1696798807:
					{
						return this.SerializeRelations();
					}
					
					
					case 2072973905:
					{
						return this.SerializeNodes();
					}
					
					
					case 1264813533:
					{
						this.AddRelation(((global::graph.EndPoint) (dynargs[0]) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ));
						break;
					}
					
					
					case 1385723043:
					{
						this.AddNode(((global::core.node.Node) (dynargs[0]) ));
						break;
					}
					
					
					case 425603605:
					{
						this.Execute();
						break;
					}
					
					
					case 207845260:
					{
						this.AddToExecutionStack(((global::graph.EndPoint) (dynargs[0]) ));
						break;
					}
					
					
					case 1535697261:
					{
						this.Clear();
						break;
					}
					
					
					case 926227490:
					{
						this.Stop();
						break;
					}
					
					
					case 389604418:
					{
						this.Start();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("_stack");
			baseArr.push("_relations");
			baseArr.push("_nodes");
			baseArr.push("graphId");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


